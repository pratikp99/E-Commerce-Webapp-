package com.revature.ecom.Servlets;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import com.revature.ecom.Models.cartModel;
import com.revature.ecom.Models.orderModel;
import com.revature.ecom.Models.orderedProductModel;
import com.revature.ecom.Models.productModel;
import com.revature.ecom.Models.userModel;
import com.revature.ecom.service.orderService;
import com.revature.ecom.serviceImpl.OrderServiceImpl;
import com.revature.ecom.Utils.DatabaseUtil;
import com.revature.ecom.Utils.OrderID;
import com.revature.ecom.Utils.mailMessage;

@WebServlet("/orders")
public class ordersServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private orderService orderService;

    public ordersServlet() {
        super();
        this.orderService = new OrderServiceImpl();
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        String from = (String) session.getAttribute("from");
        String paymentType = request.getParameter("payementMode");
        userModel user = (userModel) session.getAttribute("activeUser");
        String orderId = OrderID.getOrderId();
        String status = "Order Placed";

        if (from.trim().equals("cart")) {
            try {
                orderModel order = new orderModel(orderId, status, paymentType, user.getUserId());
                int id = orderService.createOrder(order);

                List<cartModel> listOfCart = orderService.getCartListByUserId(user.getUserId());
                for (cartModel item : listOfCart) {
                    productModel prod = orderService.getProductById(item.getProductId());
                    orderedProductModel orderedProduct = new orderedProductModel(prod.getProductName(), item.getQuantity(), prod.getProductPriceAfterDiscount(), prod.getProductImages(), id);
                    orderService.createOrderedProduct(orderedProduct);
                }

                session.removeAttribute("from");
                session.removeAttribute("totalPrice");
                orderService.removeAllProductsFromCart();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (from.trim().equals("buy")) {
            try {
                int pid = (int) session.getAttribute("pid");
                orderModel order = new orderModel(orderId, status, paymentType, user.getUserId());
                int id = orderService.createOrder(order);

                productModel prod = orderService.getProductById(pid);
                orderedProductModel orderedProduct = new orderedProductModel(prod.getProductName(), 1, prod.getProductPriceAfterDiscount(), prod.getProductImages(), id);
                orderService.createOrderedProduct(orderedProduct);

                orderService.updateProductQuantity(pid, orderService.getProductQuantityById(pid) - 1);
                session.removeAttribute("from");
                session.removeAttribute("pid");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        session.setAttribute("order", "success");
        mailMessage.successfullyOrderPlaced(user.getUserName(), user.getUserEmail(), orderId, new Date().toString());
        response.sendRedirect("index.jsp");
    }
}
