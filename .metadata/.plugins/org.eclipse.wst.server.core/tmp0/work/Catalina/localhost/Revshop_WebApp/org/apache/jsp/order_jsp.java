/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-09-02 12:16:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.revature.ecom.Models.messageModel;
import com.revature.ecom.Models.orderedProductModel;
import com.revature.ecom.Models.orderModel;
import java.util.List;
import com.revature.ecom.DAO.orderedProductDAO;
import com.revature.ecom.DAO.orderDAO;
import com.revature.ecom.Utils.DatabaseUtil;
import com.revature.ecom.Models.userModel;

public final class order_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("com.revature.ecom.Models.orderModel");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.revature.ecom.DAO.orderedProductDAO");
    _jspx_imports_classes.add("com.revature.ecom.Models.userModel");
    _jspx_imports_classes.add("com.revature.ecom.Models.orderedProductModel");
    _jspx_imports_classes.add("com.revature.ecom.DAO.orderDAO");
    _jspx_imports_classes.add("com.revature.ecom.Utils.DatabaseUtil");
    _jspx_imports_classes.add("com.revature.ecom.Models.messageModel");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error_exception.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

userModel u2 = (userModel) session.getAttribute("activeUser");
if (u2 == null) {
    messageModel message = new messageModel("You are not logged in! Login first!!", "error", "alert-danger");
    session.setAttribute("message", message);
    response.sendRedirect("login.jsp");
    return;  
}
orderDAO orderDao = new orderDAO(DatabaseUtil.getConnection());
orderedProductDAO ordProdDao = new orderedProductDAO(DatabaseUtil.getConnection());

List<orderModel> orderList = orderDao.getAllOrderByUserId(u2.getUserId());

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>My Orders</title>\n");
      out.write("    <!-- Bootstrap CSS -->\n");
      out.write("    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("    <!-- Custom CSS -->\n");
      out.write("    <link href=\"styles/custom.css\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"container mt-5\">\n");
      out.write("        ");

        if (orderList == null || orderList.size() == 0) {
        
      out.write("\n");
      out.write("        <div class=\"text-center\">\n");
      out.write("            <img src=\"Images/empty-cart.png\" alt=\"No Orders\" class=\"img-fluid\" style=\"max-width: 250px;\">\n");
      out.write("            <h4 class=\"mt-3\">No Orders Found</h4>\n");
      out.write("            <p class=\"lead\">It looks like you haven't placed any orders yet!</p>\n");
      out.write("        </div>\n");
      out.write("        ");

        } else {
        
      out.write("\n");
      out.write("        <div class=\"mb-4\">\n");
      out.write("            <h4 class=\"text-primary border-bottom pb-2\">My Orders</h4>\n");
      out.write("            <p class=\"text-muted\">Here are all your recent orders. Review your past purchases and their details.</p>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"table-responsive\">\n");
      out.write("            <table class=\"table table-striped table-hover\">\n");
      out.write("                <thead class=\"table-secondary\">\n");
      out.write("                    <tr class=\"text-center\">\n");
      out.write("                        <th>Product</th>\n");
      out.write("                        <th>Order ID</th>\n");
      out.write("                        <th>Name</th>\n");
      out.write("                        <th>Quantity</th>\n");
      out.write("                        <th>Total Price</th>\n");
      out.write("                        <th>Date and Time</th>\n");
      out.write("                        <th>Payment Type</th>\n");
      out.write("                        <th>Status</th>\n");
      out.write("                    </tr>\n");
      out.write("                </thead>\n");
      out.write("                <tbody>\n");
      out.write("                    ");

                    for (orderModel order : orderList) {
                        List<orderedProductModel> ordProdList = ordProdDao.getAllOrderedProduct(order.getId());
                        for (orderedProductModel orderProduct : ordProdList) {
                    
      out.write("\n");
      out.write("                    <tr class=\"text-center\">\n");
      out.write("                        <td><img src=\"Product_imgs/");
      out.print(orderProduct.getImage());
      out.write("\" alt=\"");
      out.print(orderProduct.getName());
      out.write("\" class=\"img-thumbnail\" style=\"max-width: 80px;\"></td>\n");
      out.write("                        <td>");
      out.print(order.getOrderId());
      out.write("</td>\n");
      out.write("                        <td>");
      out.print(orderProduct.getName());
      out.write("</td>\n");
      out.write("                        <td>");
      out.print(orderProduct.getQuantity());
      out.write("</td>\n");
      out.write("                        <td>&#8377;");
      out.print(orderProduct.getPrice() * orderProduct.getQuantity());
      out.write("</td>\n");
      out.write("                        <td>");
      out.print(order.getDate());
      out.write("</td>\n");
      out.write("                        <td>");
      out.print(order.getPayementType());
      out.write("</td>\n");
      out.write("                        <td class=\"fw-semibold text-success\">");
      out.print(order.getStatus());
      out.write("</td>\n");
      out.write("                    </tr>\n");
      out.write("                    ");

                        }
                    }
                    
      out.write("\n");
      out.write("                </tbody>\n");
      out.write("            </table>\n");
      out.write("        </div>\n");
      out.write("        ");

        }
        
      out.write("\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Bootstrap JS and dependencies -->\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js\"></script>\n");
      out.write("    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.min.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
